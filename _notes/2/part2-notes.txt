when something is wrong, do not guess... use console.log() always

every looped element within a component needs a "key" attribute, example:

      <ul>
        {notes.map(note => <li key={note.id}>{note.content}</li>)}
      </ul>

the "key" attribute and it's value only exists within react and not rendered on the html page


Array.map() = always creates a new array to avoid mutation


Anti-Pattern = index as key in a looped element

  notes.map((note, index)=>... key={index})
  because "index" is not related to the data that the elements consume


always use Array.concat() for inserting arrays so it does not mutate state

>>npm i -g json-server
>>json-server --port 3001 --watch db.json


nodejs is single threaded asynchronous non blocking io javascript runtime
meaning, it will not wait for IO execution to finish (it just executes)
parallelized code can be run using web workers


>>pnpm i axios
>>pnpm i json-server -D
  "scripts": {
    "server": "json-server -p3001 --watch db.json"
  },
>>pnpm run server
>>pnpm start


runtime dependency = execution of program requires existence of the library
development dependency = program does not need it to proceed in execution


axios.get() returns a promise

Promise = object representing an eventual completion or failure of an asynchronous operation
        = 3 states
        a. pending = final value is not available yet
        b. fulfilled = operation completed, final value available, success operation.. also called 'resolved'
        c. rejected = error prevented the final value from being determined


useEffect() = perform side effects on function components
            = data fetching, subscription, manually changing dom
            = right tool for fetching data from a server
            = remember that updating state also rerenders component
            = executed AFTER rendering the component for the
              FIRST TIME IF we pass an empty array as the second parameter,
              otherwise it is triggered if the value of the second parameter changes


REST
  resources accessed via URL using HTTP GET
  creating reseource via HTTP POST, data is sent to the body of the request in json format
  note = let server handle the generation of IDs and not the client

  Array.concat() appends new element on array and returns a new array to avoid state mutation
  we make a shallow copy of an object (make new object from existing object) that is candidate for changes


need to apply "single responsibility principle" therefore if communicating a server,
it is wise to implement it on it's own module


best practice is to initiate states that will handle array as 'null'
and handle the rendering by returning 'null' if the array is not initialized